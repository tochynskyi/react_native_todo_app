{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { useAppDispatch } from \"../store/hooks\";\nimport { logout } from \"../http/userAPI\";\nimport { userLogout } from \"../store/userSlice\";\nimport ModalDropdown from \"react-native-modal-dropdown\";\nimport { sortByDate, sortByPriority } from \"../store/todoSlice\";\nimport dayjs from \"dayjs\";\nimport { Colors } from \"../styles/colors\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar sortOptions = [\"Date\", \"Priority\"];\nexport var Header = function Header() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      sort = _useState2[0],\n      setSort = _useState2[1];\n\n  var dispatch = useAppDispatch();\n\n  var onLogout = function onLogout() {\n    return _regeneratorRuntime.async(function onLogout$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            logout();\n            dispatch(userLogout());\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    if (sort === \"Priority\") {\n      dispatch(sortByPriority());\n      return;\n    }\n\n    if (sort === \"Date\") {\n      dispatch(sortByDate());\n      return;\n    }\n  }, [sort]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.titleWrapper,\n      children: _jsxs(Text, {\n        style: styles.title,\n        children: [\"Today \", dayjs().format(\"DD MMM\")]\n      })\n    }), _jsx(ModalDropdown, {\n      defaultValue: \"Sort by\",\n      renderButtonText: function renderButtonText() {\n        return \"Sort by\";\n      },\n      textStyle: styles.dropdownTitle,\n      options: sortOptions,\n      onSelect: function onSelect(idx, value) {\n        return setSort(value);\n      },\n      style: styles.sortModal,\n      dropdownStyle: styles.dropdownList,\n      dropdownTextStyle: styles.dropdownListTxt,\n      dropdownTextHighlightStyle: styles.dropdownListSelectTxt\n    }), _jsx(Pressable, {\n      onPress: onLogout,\n      children: _jsx(Text, {\n        style: styles.exitTxt,\n        children: \"Exit\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    paddingTop: 25,\n    paddingHorizontal: 15,\n    paddingBottom: 10,\n    width: \"100%\",\n    backgroundColor: Colors.primaryBg\n  },\n  titleWrapper: {\n    flex: 1\n  },\n  title: {\n    fontSize: 16,\n    fontWeight: \"500\",\n    color: Colors.white\n  },\n  sortModal: {\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: Colors.white,\n    marginRight: 15,\n    paddingVertical: 3,\n    paddingHorizontal: 5,\n    backgroundColor: Colors.white\n  },\n  dropdownTitle: {\n    fontSize: 14,\n    fontWeight: \"500\",\n    color: Colors.black\n  },\n  dropdownList: {\n    flex: 1,\n    width: \"20%\",\n    height: \"auto\",\n    marginTop: 5\n  },\n  dropdownListTxt: {\n    fontSize: 18,\n    fontWeight: \"500\",\n    color: Colors.black\n  },\n  dropdownListSelectTxt: {\n    backgroundColor: Colors.primaryBg,\n    color: Colors.white\n  },\n  exitTxt: {\n    color: Colors.white,\n    fontWeight: \"500\"\n  }\n});","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/components/Header.tsx"],"names":["React","useEffect","useState","useAppDispatch","logout","userLogout","ModalDropdown","sortByDate","sortByPriority","dayjs","Colors","sortOptions","Header","sort","setSort","dispatch","onLogout","styles","container","titleWrapper","title","format","dropdownTitle","idx","value","sortModal","dropdownList","dropdownListTxt","dropdownListSelectTxt","exitTxt","StyleSheet","create","display","flexDirection","alignItems","paddingTop","paddingHorizontal","paddingBottom","width","backgroundColor","primaryBg","flex","fontSize","fontWeight","color","white","borderWidth","borderRadius","borderColor","marginRight","paddingVertical","black","height","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { StyleSheet, Text, View, Pressable } from \"react-native\";\r\nimport { useAppDispatch } from \"../store/hooks\";\r\nimport { logout } from \"../http/userAPI\";\r\nimport { userLogout } from \"../store/userSlice\";\r\nimport ModalDropdown from \"react-native-modal-dropdown\";\r\nimport { sortByDate, sortByPriority } from \"../store/todoSlice\";\r\nimport dayjs from \"dayjs\";\r\nimport { Colors } from \"../styles/colors\";\r\n\r\nconst sortOptions = [\"Date\", \"Priority\"];\r\n\r\nexport const Header = () => {\r\n  const [sort, setSort] = useState<string>(\"\");\r\n  const dispatch = useAppDispatch();\r\n\r\n  const onLogout = async () => {\r\n    logout();\r\n    dispatch(userLogout());\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (sort === \"Priority\") {\r\n      dispatch(sortByPriority());\r\n      return;\r\n    }\r\n    if (sort === \"Date\") {\r\n      dispatch(sortByDate());\r\n      return;\r\n    }\r\n  }, [sort]);\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.titleWrapper}>\r\n        <Text style={styles.title}>Today {dayjs().format(\"DD MMM\")}</Text>\r\n      </View>\r\n      <ModalDropdown\r\n        defaultValue=\"Sort by\"\r\n        renderButtonText={() => \"Sort by\"}\r\n        textStyle={styles.dropdownTitle}\r\n        options={sortOptions}\r\n        onSelect={(idx, value) => setSort(value)}\r\n        style={styles.sortModal}\r\n        dropdownStyle={styles.dropdownList}\r\n        dropdownTextStyle={styles.dropdownListTxt}\r\n        dropdownTextHighlightStyle={styles.dropdownListSelectTxt}\r\n      />\r\n      <Pressable onPress={onLogout}>\r\n        <Text style={styles.exitTxt}>Exit</Text>\r\n      </Pressable>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    paddingTop: 25,\r\n    paddingHorizontal: 15,\r\n    paddingBottom: 10,\r\n    width: \"100%\",\r\n    backgroundColor: Colors.primaryBg,\r\n  },\r\n  titleWrapper: {\r\n    flex: 1,\r\n  },\r\n  title: {\r\n    fontSize: 16,\r\n    fontWeight: \"500\",\r\n    color: Colors.white,\r\n  },\r\n  sortModal: {\r\n    borderWidth: 1,\r\n    borderRadius: 5,\r\n    borderColor: Colors.white,\r\n    marginRight: 15,\r\n    paddingVertical: 3,\r\n    paddingHorizontal: 5,\r\n    backgroundColor: Colors.white,\r\n  },\r\n  dropdownTitle: {\r\n    fontSize: 14,\r\n    fontWeight: \"500\",\r\n    color: Colors.black,\r\n  },\r\n  dropdownList: {\r\n    flex: 1,\r\n    width: \"20%\",\r\n    height: \"auto\",\r\n    marginTop: 5,\r\n  },\r\n  dropdownListTxt: {\r\n    fontSize: 18,\r\n    fontWeight: \"500\",\r\n    color: Colors.black,\r\n  },\r\n  dropdownListSelectTxt: {\r\n    backgroundColor: Colors.primaryBg,\r\n    color: Colors.white,\r\n  },\r\n  exitTxt: {\r\n    color: Colors.white,\r\n    fontWeight: \"500\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}