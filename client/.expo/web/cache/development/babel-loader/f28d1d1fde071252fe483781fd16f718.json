{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { useAppDispatch } from \"../store/hooks\";\nimport { logout } from \"../http/userAPI\";\nimport { userLogout } from \"../store/userSlice\";\nimport ModalDropdown from 'react-native-modal-dropdown';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar sortOptions = ['Date', 'Priority'];\nexport var Header = function Header() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      sort = _useState2[0],\n      setSort = _useState2[1];\n\n  var dispatch = useAppDispatch();\n\n  var onLogout = function onLogout() {\n    return _regeneratorRuntime.async(function onLogout$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            logout();\n            dispatch(userLogout());\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Pressable, {\n      children: _jsx(ModalDropdown, {\n        defaultValue: \"Sort by\",\n        options: sortOptions,\n        onSelect: function onSelect(idx, value) {\n          return setSort();\n        }\n      })\n    }), _jsx(Pressable, {\n      onPress: onLogout,\n      children: _jsx(Text, {\n        children: \"Logout\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    borderColor: \"#e4e3e3\",\n    borderBottomWidth: 1,\n    padding: 10,\n    marginTop: 15,\n    height: 30,\n    width: \"100%\"\n  }\n});","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/components/Header.tsx"],"names":["React","useState","useAppDispatch","logout","userLogout","ModalDropdown","sortOptions","Header","sort","setSort","dispatch","onLogout","styles","container","idx","value","StyleSheet","create","display","flexDirection","alignItems","borderColor","borderBottomWidth","padding","marginTop","height","width"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAEA,SAASC,cAAT;AACA,SAASC,MAAT;AACA,SAASC,UAAT;AACA,OAAOC,aAAP,MAA0B,6BAA1B;;;AAEA,IAAMC,WAAW,GAAG,CAAC,MAAD,EAAS,UAAT,CAApB;AAEA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AAC3B,kBAAwBN,QAAQ,CAAS,EAAT,CAAhC;AAAA;AAAA,MAAOO,IAAP;AAAA,MAAaC,OAAb;;AACA,MAAMC,QAAQ,GAAGR,cAAc,EAA/B;;AAEA,MAAMS,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AACfR,YAAAA,MAAM;AACNO,YAAAA,QAAQ,CAACN,UAAU,EAAX,CAAR;;AAFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAIC,SACA,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEQ,MAAM,CAACC,SAApB;AAAA,eACC,KAAC,SAAD;AAAA,gBACA,KAAC,aAAD;AACS,QAAA,YAAY,EAAC,SADtB;AAES,QAAA,OAAO,EAAEP,WAFlB;AAGS,QAAA,QAAQ,EAAE,kBAACQ,GAAD,EAAMC,KAAN;AAAA,iBAAgBN,OAAO,EAAvB;AAAA;AAHnB;AADA,MADD,EAQI,KAAC,SAAD;AAAW,MAAA,OAAO,EAAEE,QAApB;AAAA,gBACH,KAAC,IAAD;AAAA;AAAA;AADG,MARJ;AAAA,IADA;AAeD,CAvBM;AA0BP,IAAMC,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAChCJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,OAAO,EAAE,MADA;AAETC,IAAAA,aAAa,EAAE,KAFN;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,WAAW,EAAE,SAJJ;AAKTC,IAAAA,iBAAiB,EAAE,CALV;AAMTC,IAAAA,OAAO,EAAE,EANA;AAOTC,IAAAA,SAAS,EAAE,EAPF;AAQTC,IAAAA,MAAM,EAAE,EARC;AASTC,IAAAA,KAAK,EAAE;AATE;AADqB,CAAlB,CAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport { StyleSheet,Button, Text, TextInput, View, Pressable } from \"react-native\";\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\r\nimport { logout } from \"../http/userAPI\";\r\nimport { userLogout } from \"../store/userSlice\";\r\nimport ModalDropdown from 'react-native-modal-dropdown';\r\n\r\nconst sortOptions = ['Date', 'Priority']\r\n\r\nexport const Header = () => {\r\n\tconst [sort, setSort] = useState<string>('')\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\tconst onLogout = async () => {\r\n\t  logout();\r\n\t  dispatch(userLogout());\r\n\t};\r\n  return (\r\n\t <View style={styles.container}>\r\n\t\t <Pressable>\r\n\t\t <ModalDropdown\r\n            defaultValue=\"Sort by\"\r\n            options={sortOptions}\r\n            onSelect={(idx, value) => setSort()}\r\n          />\r\n\t\t</Pressable>\r\n      <Pressable onPress={onLogout}>\r\n\t\t\t<Text>Logout</Text>\r\n\t\t</Pressable>\r\n\t\t\r\n\t </View>\r\n  )\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n\tcontainer: {\r\n\t  display: \"flex\",\r\n\t  flexDirection: \"row\",\r\n\t  alignItems: \"center\",\r\n\t  borderColor: \"#e4e3e3\",\r\n\t  borderBottomWidth: 1,\r\n\t  padding: 10,\r\n\t  marginTop: 15,\r\n\t  height: 30,\r\n\t  width: \"100%\",\r\n\t},\r\n });"]},"metadata":{},"sourceType":"module"}