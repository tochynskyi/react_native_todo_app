{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from \"expo-status-bar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Auth from \"./Auth\";\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\nimport Todo from \"./Todo\";\nimport { check } from \"../http/userAPI\";\nimport { useEffect } from \"react\";\nimport { fetchUserError, userLogin, userLoginSuccess } from \"../store/userSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Main = function Main() {\n  var _useAppSelector = useAppSelector(function (state) {\n    return state.user;\n  }),\n      isAuth = _useAppSelector.isAuth,\n      userError = _useAppSelector.userError,\n      user = _useAppSelector.user;\n\n  var dispatch = useAppDispatch();\n  useEffect(function () {\n    var checkAuth = function checkAuth() {\n      var _user;\n\n      return _regeneratorRuntime.async(function checkAuth$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              dispatch(userLogin());\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(check());\n\n            case 4:\n              _user = _context.sent;\n              dispatch(userLoginSuccess(_user));\n              _context.next = 12;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0.response.data.message);\n              dispatch(fetchUserError(_context.t0.response.data.message));\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    };\n\n    checkAuth();\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(StatusBar, {\n      style: \"auto\"\n    }), isAuth ? _jsx(Todo, {}) : _jsx(Auth, {})]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#202020\",\n    padding: 10\n  }\n});\nexport default Main;","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/pages/Main.tsx"],"names":["StatusBar","Auth","useAppDispatch","useAppSelector","Todo","check","useEffect","fetchUserError","userLogin","userLoginSuccess","Main","state","user","isAuth","userError","dispatch","checkAuth","console","log","response","data","message","styles","container","StyleSheet","create","flex","backgroundColor","padding"],"mappings":";AAAA,SAASA,SAAT,QAA0B,iBAA1B;;;AAEA,OAAOC,IAAP;AACA,SAASC,cAAT,EAAyBC,cAAzB;AACA,OAAOC,IAAP;AACA,SAASC,KAAT;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SACCC,cADD,EAEEC,SAFF,EAGEC,gBAHF;;;;AAMA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,wBAAoCP,cAAc,CAAC,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAAlD;AAAA,MAAQC,MAAR,mBAAQA,MAAR;AAAA,MAAgBC,SAAhB,mBAAgBA,SAAhB;AAAA,MAA2BF,IAA3B,mBAA2BA,IAA3B;;AACA,MAAMG,QAAQ,GAAGb,cAAc,EAA/B;AAEAI,EAAAA,SAAS,CAAC,YAAM;AACf,QAAMU,SAAS,GAAG,SAAZA,SAAY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAElBD,cAAAA,QAAQ,CAACP,SAAS,EAAV,CAAR;AAFkB;AAAA,+CAGCH,KAAK,EAHN;;AAAA;AAGZO,cAAAA,KAHY;AAIlBG,cAAAA,QAAQ,CAACN,gBAAgB,CAACG,KAAD,CAAjB,CAAR;AAJkB;AAAA;;AAAA;AAAA;AAAA;AAMlBK,cAAAA,OAAO,CAACC,GAAR,CAAY,YAAEC,QAAF,CAAWC,IAAX,CAAgBC,OAA5B;AACAN,cAAAA,QAAQ,CAACR,cAAc,CAAC,YAAEY,QAAF,CAAWC,IAAX,CAAgBC,OAAjB,CAAf,CAAR;;AAPkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAWFL,IAAAA,SAAS;AACP,GAbQ,EAaN,EAbM,CAAT;AAeA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEM,MAAM,CAACC,SAApB;AAAA,eACE,KAAC,SAAD;AAAW,MAAA,KAAK,EAAC;AAAjB,MADF,EAEGV,MAAM,GAAG,KAAC,IAAD,KAAH,GAAc,KAAC,IAAD,KAFvB;AAAA,IADF;AAMD,CAzBD;;AA2BA,IAAMS,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,SAFR;AAGTC,IAAAA,OAAO,EAAE;AAHA;AADoB,CAAlB,CAAf;AAQA,eAAelB,IAAf","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\r\nimport { StyleSheet, View, Text } from \"react-native\";\r\nimport Auth from \"./Auth\";\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\r\nimport Todo from \"./Todo\";\r\nimport { check } from \"../http/userAPI\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n\tfetchUserError,\r\n  userLogin,\r\n  userLoginSuccess,\r\n} from \"../store/userSlice\";\r\n\r\nconst Main = () => {\r\n  const { isAuth, userError, user } = useAppSelector((state) => state.user);\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n\t  const checkAuth = async () => {\r\n\t\t  try {\r\n\t\t\tdispatch(userLogin());\r\n\t\t\tconst user = await check()\r\n\t\t\tdispatch(userLoginSuccess(user))\r\n\t\t  } catch (e: any) {\r\n\t\t\tconsole.log(e.response.data.message);\r\n\t\t\tdispatch(fetchUserError(e.response.data.message));\r\n\t\t  }\r\n\t\t\r\n\t  }\r\n\tcheckAuth()\r\n  }, []);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <StatusBar style=\"auto\" />\r\n      {isAuth ? <Todo /> : <Auth />}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#202020\",\r\n    padding: 10,\r\n  },\r\n});\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}