{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport dayjs from \"dayjs\";\nimport { useState } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ModalDropdown from \"react-native-modal-dropdown\";\nimport { addTodosDB } from \"../http/todoAPI\";\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\nimport { addTodo, fetchTodoError } from \"../store/todoSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar todoPriority = [\"High\", \"Middle\", \"Low\", \"None\"];\n\nvar TodoForm = function TodoForm() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(4),\n      _useState4 = _slicedToArray(_useState3, 2),\n      priority = _useState4[0],\n      setPriority = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isOpen = _useState6[0],\n      setIsOpen = _useState6[1];\n\n  var _useAppSelector = useAppSelector(function (state) {\n    return state.user;\n  }),\n      user = _useAppSelector.user;\n\n  var dispatch = useAppDispatch();\n\n  var createTodo = function createTodo() {\n    var newTodo;\n    return _regeneratorRuntime.async(function createTodo$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!(value && user)) {\n              _context.next = 9;\n              break;\n            }\n\n            newTodo = {\n              id: Date.now().toString(),\n              author: user.id,\n              checked: false,\n              title: value,\n              priority: priority,\n              date: dayjs().format(\"D\") + \" \" + dayjs().format(\"MMM\"),\n              addDate: dayjs().format()\n            };\n            dispatch(addTodo(newTodo));\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(addTodosDB(newTodo));\n\n          case 6:\n            setValue(\"\");\n            setIsOpen(!isOpen);\n            return _context.abrupt(\"return\");\n\n          case 9:\n            return _context.abrupt(\"return\", console.log(\"Todo must have title\"));\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(fetchTodoError(_context.t0));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n\n  return _jsx(View, {\n    children: isOpen ? _jsxs(View, {\n      style: styles.formOpen,\n      children: [_jsx(TextInput, {\n        onChangeText: function onChangeText(text) {\n          return setValue(text);\n        },\n        value: value,\n        placeholder: \"Enter you task...\",\n        style: styles.input\n      }), _jsx(ModalDropdown, {\n        defaultValue: \"Priority\",\n        options: todoPriority,\n        onSelect: function onSelect(idx) {\n          return setPriority(+idx + 1);\n        }\n      }), _jsx(Button, {\n        color: \"#3b00a8\",\n        title: \"Add todo\",\n        onPress: createTodo\n      })]\n    }) : _jsx(Pressable, {\n      style: styles.formClose,\n      onPress: function onPress() {\n        return setIsOpen(!isOpen);\n      },\n      children: _jsx(Text, {\n        children: \"Open\"\n      })\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  formOpen: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: 15\n  },\n  formClose: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderWidth: 1,\n    width: 50,\n    height: 50,\n    br: br\n  },\n  title: {\n    fontSize: 30,\n    fontWeight: \"700\",\n    color: \"#e4e3e3\"\n  },\n  input: {\n    padding: 10,\n    backgroundColor: \"#e4e3e3\",\n    borderRadius: 20,\n    width: \"100\",\n    height: 50,\n    marginBottom: 15\n  }\n});\nexport default TodoForm;","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/components/TodoForm.tsx"],"names":["dayjs","useState","ModalDropdown","addTodosDB","useAppDispatch","useAppSelector","addTodo","fetchTodoError","todoPriority","TodoForm","value","setValue","priority","setPriority","isOpen","setIsOpen","state","user","dispatch","createTodo","newTodo","id","Date","now","toString","author","checked","title","date","format","addDate","console","log","styles","formOpen","text","input","idx","formClose","StyleSheet","create","display","alignItems","marginBottom","justifyContent","borderWidth","width","height","br","fontSize","fontWeight","color","padding","backgroundColor","borderRadius"],"mappings":"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","sourcesContent":["import dayjs from \"dayjs\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Pressable,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  View,\r\n} from \"react-native\";\r\nimport ModalDropdown from \"react-native-modal-dropdown\";\r\n\r\nimport { addTodosDB } from \"../http/todoAPI\";\r\nimport { ITodo } from \"../interfaces/ITodo\";\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\r\nimport { addTodo, fetchTodoError } from \"../store/todoSlice\";\r\n\r\nconst todoPriority = [\"High\", \"Middle\", \"Low\", \"None\"];\r\n\r\nconst TodoForm = () => {\r\n  const [value, setValue] = useState<string>(\"\");\r\n  const [priority, setPriority] = useState<number>(4);\r\n  const [isOpen, setIsOpen] = useState<boolean>(false);\r\n  const { user } = useAppSelector((state) => state.user);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const createTodo = async () => {\r\n    try {\r\n      if (value && user) {\r\n        const newTodo: ITodo = {\r\n          id: Date.now().toString(),\r\n          author: user.id,\r\n          checked: false,\r\n          title: value,\r\n          priority: priority,\r\n          date: `${dayjs().format(\"D\")} ${dayjs().format(\"MMM\")}`,\r\n          addDate: dayjs().format(),\r\n        };\r\n        dispatch(addTodo(newTodo));\r\n        await addTodosDB(newTodo);\r\n        setValue(\"\");\r\n        setIsOpen(!isOpen);\r\n        return;\r\n      }\r\n      return console.log(\"Todo must have title\");\r\n    } catch (error: any) {\r\n      dispatch(fetchTodoError(error));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      {isOpen ? (\r\n        <View style={styles.formOpen}>\r\n          <TextInput\r\n            onChangeText={(text) => setValue(text)}\r\n            value={value}\r\n            placeholder={\"Enter you task...\"}\r\n            style={styles.input}\r\n          />\r\n          <ModalDropdown\r\n            defaultValue=\"Priority\"\r\n            options={todoPriority}\r\n            onSelect={(idx) => setPriority(+idx + 1)}\r\n          />\r\n          <Button color={\"#3b00a8\"} title=\"Add todo\" onPress={createTodo} />\r\n        </View>\r\n      ) : (\r\n        <Pressable style={styles.formClose} onPress={() => setIsOpen(!isOpen)}>\r\n          <Text>Open</Text>\r\n        </Pressable>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  formOpen: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    marginBottom: 15,\r\n  },\r\n  formClose: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    borderWidth: 1,\r\n    width: 50,\r\n    height: 50,\r\n\t br\r\n  },\r\n  title: {\r\n    fontSize: 30,\r\n    fontWeight: \"700\",\r\n    color: \"#e4e3e3\",\r\n  },\r\n  input: {\r\n    padding: 10,\r\n    backgroundColor: \"#e4e3e3\",\r\n    borderRadius: 20,\r\n    width: \"100\",\r\n    height: 50,\r\n    marginBottom: 15,\r\n  },\r\n});\r\n\r\nexport default TodoForm;\r\n"]},"metadata":{},"sourceType":"module"}