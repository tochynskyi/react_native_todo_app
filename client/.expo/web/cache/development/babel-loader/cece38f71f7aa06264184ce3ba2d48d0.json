{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useAppSelector } from \"../store/hooks\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar TodoForm = function TodoForm() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useAppSelector = useAppSelector(function (state) {\n    return state.user;\n  }),\n      user = _useAppSelector.user;\n\n  var createTodo = function createTodo() {\n    var newTodo = {\n      _id: Date.now().toString(),\n      author: user == null ? void 0 : user.id,\n      checked: false,\n      title: value\n    };\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"TODO LIST\"\n    }), _jsx(TextInput, {\n      onChangeText: function onChangeText(text) {\n        return setValue(text);\n      },\n      style: styles.input\n    }), _jsx(Button, {\n      color: \"#3b00a8\",\n      title: \"Add todo\",\n      onPress: createTodo\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: 15\n  },\n  title: {\n    fontSize: 30,\n    fontWeight: '700',\n    color: \"#e4e3e3\"\n  },\n  input: {\n    padding: 10,\n    backgroundColor: \"#e4e3e3\",\n    borderRadius: 20,\n    width: \"100\",\n    height: 50,\n    marginBottom: 15\n  }\n});\nexport default TodoForm;","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/components/TodoForm.tsx"],"names":["useState","useAppSelector","TodoForm","value","setValue","state","user","createTodo","newTodo","_id","Date","now","toString","author","id","checked","title","styles","container","text","input","StyleSheet","create","display","alignItems","marginBottom","fontSize","fontWeight","color","padding","backgroundColor","borderRadius","width","height"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;;;;;;AAGA,SAASC,cAAT;;;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACtB,kBAA0BF,QAAQ,CAAS,EAAT,CAAlC;AAAA;AAAA,MAAOG,KAAP;AAAA,MAAcC,QAAd;;AACA,wBAAgBH,cAAc,CAAC,UAACI,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAA9B;AAAA,MAAQA,IAAR,mBAAQA,IAAR;;AAGA,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACxB,QAAMC,OAAc,GAAG;AACtBC,MAAAA,GAAG,EAAEC,IAAI,CAACC,GAAL,GAAWC,QAAX,EADiB;AAEtBC,MAAAA,MAAM,EAAEP,IAAF,oBAAEA,IAAI,CAAEQ,EAFQ;AAGtBC,MAAAA,OAAO,EAAE,KAHa;AAItBC,MAAAA,KAAK,EAAEb;AAJe,KAAvB;AAOA,GARD;;AASC,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEc,MAAM,CAACC,SAApB;AAAA,eACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAED,MAAM,CAACD,KAApB;AAAA;AAAA,MADF,EAEF,KAAC,SAAD;AAAY,MAAA,YAAY,EAAE,sBAAAG,IAAI;AAAA,eAAIf,QAAQ,CAACe,IAAD,CAAZ;AAAA,OAA9B;AAAkD,MAAA,KAAK,EAAEF,MAAM,CAACG;AAAhE,MAFE,EAGF,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,SAAf;AAA0B,MAAA,KAAK,EAAC,UAAhC;AAA2C,MAAA,OAAO,EAAEb;AAApD,MAHE;AAAA,IADF;AAOD,CArBD;;AAuBA,IAAMU,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,OAAO,EAAE,MADA;AAEZC,IAAAA,UAAU,EAAE,QAFA;AAGZC,IAAAA,YAAY,EAAE;AAHF,GADoB;AAO/BT,EAAAA,KAAK,EAAE;AACNU,IAAAA,QAAQ,EAAC,EADH;AAENC,IAAAA,UAAU,EAAE,KAFN;AAGNC,IAAAA,KAAK,EAAE;AAHD,GAPwB;AAY/BR,EAAAA,KAAK,EAAE;AACRS,IAAAA,OAAO,EAAE,EADD;AAERC,IAAAA,eAAe,EAAE,SAFT;AAGRC,IAAAA,YAAY,EAAE,EAHN;AAIRC,IAAAA,KAAK,EAAE,KAJC;AAKRC,IAAAA,MAAM,EAAE,EALA;AAMRR,IAAAA,YAAY,EAAE;AANN;AAZwB,CAAlB,CAAf;AAuBA,eAAevB,QAAf","sourcesContent":["import { useState } from 'react';\r\nimport { Button, StyleSheet, Text, TextInput, View } from 'react-native';\r\nimport { ITodo } from '../interfaces/ITodo';\r\nimport { useAppSelector } from '../store/hooks';\r\n\r\nconst TodoForm = () => {\r\n\tconst [value, setValue] = useState<string>('')\r\n\tconst { user} = useAppSelector((state) => state.user);\r\n\r\n\t\r\n\tconst createTodo = () => {\r\n\t\tconst newTodo: ITodo = {\r\n\t\t\t_id: Date.now().toString(),\r\n\t\t\tauthor: user?.id,\r\n\t\t\tchecked: false,\r\n\t\t\ttitle: value\r\n\t\t}\r\n\r\n\t}\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>TODO LIST</Text>\r\n\t\t<TextInput  onChangeText={text => setValue(text)} style={styles.input}/>\r\n\t\t<Button color={\"#3b00a8\"} title='Add todo' onPress={createTodo}/>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    display: 'flex',\r\n\talignItems: 'center',\r\n\tmarginBottom: 15,\r\n\r\n  },\r\n  title: {\r\n\t  fontSize:30,\r\n\t  fontWeight: '700',\r\n\t  color: \"#e4e3e3\",\r\n  },\r\n  input: {\r\n\tpadding: 10,\r\n\tbackgroundColor: \"#e4e3e3\",\r\n\tborderRadius: 20,\r\n\twidth: \"100\",\r\n\theight: 50,\r\n\tmarginBottom: 15,\r\n  },\r\n  \r\n});\r\n\r\nexport default TodoForm"]},"metadata":{},"sourceType":"module"}