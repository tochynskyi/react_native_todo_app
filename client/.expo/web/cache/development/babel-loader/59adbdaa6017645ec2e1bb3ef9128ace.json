{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { addTodosDB } from \"../http/todoAPI\";\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\nimport { addTodo } from \"../store/todoSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar TodoForm = function TodoForm() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useAppSelector = useAppSelector(function (state) {\n    return state.user;\n  }),\n      user = _useAppSelector.user;\n\n  var dispatch = useAppDispatch();\n\n  var createTodo = function createTodo() {\n    var newTodo;\n    return _regeneratorRuntime.async(function createTodo$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            newTodo = {\n              id: Date.now().toString(),\n              author: user == null ? void 0 : user.id,\n              checked: false,\n              title: value\n            };\n            dispatch(addTodo(newTodo));\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(addTodosDB(newTodo));\n\n          case 5:\n            setValue(\"\");\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"TODO LIST\"\n    }), _jsx(TextInput, {\n      onChangeText: function onChangeText(text) {\n        return setValue(text);\n      },\n      value: value,\n      style: styles.input\n    }), _jsx(Button, {\n      color: \"#3b00a8\",\n      title: \"Add todo\",\n      onPress: createTodo\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: 15\n  },\n  title: {\n    fontSize: 30,\n    fontWeight: \"700\",\n    color: \"#e4e3e3\"\n  },\n  input: {\n    padding: 10,\n    backgroundColor: \"#e4e3e3\",\n    borderRadius: 20,\n    width: \"100\",\n    height: 50,\n    marginBottom: 15\n  }\n});\nexport default TodoForm;","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/components/TodoForm.tsx"],"names":["useState","addTodosDB","useAppDispatch","useAppSelector","addTodo","TodoForm","value","setValue","state","user","dispatch","createTodo","newTodo","id","Date","now","toString","author","checked","title","console","log","styles","container","text","input","StyleSheet","create","display","alignItems","marginBottom","fontSize","fontWeight","color","padding","backgroundColor","borderRadius","width","height"],"mappings":";;AAAA,SAAoBA,QAApB,QAAoC,OAApC;;;;;;AAEA,SAASC,UAAT;AAEA,SAASC,cAAT,EAAyBC,cAAzB;AACA,SAASC,OAAT;;;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,kBAA0BL,QAAQ,CAAS,EAAT,CAAlC;AAAA;AAAA,MAAOM,KAAP;AAAA,MAAcC,QAAd;;AACA,wBAAiBJ,cAAc,CAAC,UAACK,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAA/B;AAAA,MAAQA,IAAR,mBAAQA,IAAR;;AACA,MAAMC,QAAQ,GAAGR,cAAc,EAA/B;;AAEA,MAAMS,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAETC,YAAAA,OAFS,GAEQ;AACrBC,cAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,GAAWC,QAAX,EADiB;AAErBC,cAAAA,MAAM,EAAER,IAAF,oBAAEA,IAAI,CAAEI,EAFO;AAGrBK,cAAAA,OAAO,EAAE,KAHY;AAIrBC,cAAAA,KAAK,EAAEb;AAJc,aAFR;AAQfI,YAAAA,QAAQ,CAACN,OAAO,CAACQ,OAAD,CAAR,CAAR;AARe;AAAA,6CASTX,UAAU,CAACW,OAAD,CATD;;AAAA;AAUfL,YAAAA,QAAQ,CAAC,EAAD,CAAR;AAVe;AAAA;;AAAA;AAAA;AAAA;AAYfa,YAAAA,OAAO,CAACC,GAAR;;AAZe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAgBA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA,eACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAED,MAAM,CAACH,KAApB;AAAA;AAAA,MADF,EAEE,KAAC,SAAD;AACE,MAAA,YAAY,EAAE,sBAACK,IAAD;AAAA,eAAUjB,QAAQ,CAACiB,IAAD,CAAlB;AAAA,OADhB;AAEE,MAAA,KAAK,EAAElB,KAFT;AAGE,MAAA,KAAK,EAAEgB,MAAM,CAACG;AAHhB,MAFF,EAOE,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,SAAf;AAA0B,MAAA,KAAK,EAAC,UAAhC;AAA2C,MAAA,OAAO,EAAEd;AAApD,MAPF;AAAA,IADF;AAWD,CAhCD;;AAkCA,IAAMW,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,OAAO,EAAE,MADA;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,YAAY,EAAE;AAHL,GADoB;AAM/BX,EAAAA,KAAK,EAAE;AACLY,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,UAAU,EAAE,KAFP;AAGLC,IAAAA,KAAK,EAAE;AAHF,GANwB;AAW/BR,EAAAA,KAAK,EAAE;AACLS,IAAAA,OAAO,EAAE,EADJ;AAELC,IAAAA,eAAe,EAAE,SAFZ;AAGLC,IAAAA,YAAY,EAAE,EAHT;AAILC,IAAAA,KAAK,EAAE,KAJF;AAKLC,IAAAA,MAAM,EAAE,EALH;AAMLR,IAAAA,YAAY,EAAE;AANT;AAXwB,CAAlB,CAAf;AAqBA,eAAezB,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Button, StyleSheet, Text, TextInput, View } from \"react-native\";\r\nimport { addTodosDB } from \"../http/todoAPI\";\r\nimport { ITodo } from \"../interfaces/ITodo\";\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\r\nimport { addTodo } from \"../store/todoSlice\";\r\n\r\nconst TodoForm = () => {\r\n  const [value, setValue] = useState<string>(\"\");\r\n  const { user } = useAppSelector((state) => state.user);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const createTodo = async () => {\r\n    try {\r\n      const newTodo: ITodo = {\r\n        id: Date.now().toString(),\r\n        author: user?.id,\r\n        checked: false,\r\n        title: value,\r\n      };\r\n      dispatch(addTodo(newTodo));\r\n      await addTodosDB(newTodo);\r\n      setValue(\"\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>TODO LIST</Text>\r\n      <TextInput\r\n        onChangeText={(text) => setValue(text)}\r\n        value={value}\r\n        style={styles.input}\r\n      />\r\n      <Button color={\"#3b00a8\"} title=\"Add todo\" onPress={createTodo} />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    marginBottom: 15,\r\n  },\r\n  title: {\r\n    fontSize: 30,\r\n    fontWeight: \"700\",\r\n    color: \"#e4e3e3\",\r\n  },\r\n  input: {\r\n    padding: 10,\r\n    backgroundColor: \"#e4e3e3\",\r\n    borderRadius: 20,\r\n    width: \"100\",\r\n    height: 50,\r\n    marginBottom: 15,\r\n  },\r\n});\r\n\r\nexport default TodoForm;\r\n"]},"metadata":{},"sourceType":"module"}