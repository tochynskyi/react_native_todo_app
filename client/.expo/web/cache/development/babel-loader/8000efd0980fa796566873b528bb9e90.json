{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { authInstance } from \"./index\";\nimport { fetchTodoError, fetchTodos, fetchTodosSuccess, addTodo } from \"../store/todoSlice\";\nexport var getTodos = function getTodos(_ref) {\n  var id = _ref.id;\n  return function _callee(dispatch) {\n    var _await$authInstance$g, data;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            dispatch(fetchTodos());\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(authInstance.get(\"/api/todos/getTodos/\" + id));\n\n          case 4:\n            _await$authInstance$g = _context.sent;\n            data = _await$authInstance$g.data;\n            dispatch(fetchTodosSuccess(data));\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(fetchTodoError(_context.t0));\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n};\nexport var addTodos = function addTodos(todo) {\n  return function _callee2(dispatch) {\n    var response;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            dispatch(addTodo(todo));\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(authInstance.post(\"/api/todos/addTodo\", todo));\n\n          case 4:\n            response = _context2.sent;\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch(fetchTodoError(_context2.t0.response.data.messeage));\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\nexport var checkTodos = function checkTodos(_ref2) {\n  var id, checked, response;\n  return _regeneratorRuntime.async(function checkTodos$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          id = _ref2.id, checked = _ref2.checked;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(authInstance.post(\"/api/todos/checkTodo\", {\n            id: id,\n            checked: checked\n          }));\n\n        case 4:\n          response = _context3.sent;\n          console.log(response.data.checked);\n          _context3.next = 11;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](1);\n          return _context3.abrupt(\"return\", _context3.t0.response.data.messeage);\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[1, 8]], Promise);\n};\nexport var deleteTodos = function deleteTodos(_ref3) {\n  var id, response;\n  return _regeneratorRuntime.async(function deleteTodos$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          id = _ref3.id;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(authInstance.delete(\"/api/todos/deleteTodo/\" + id));\n\n        case 4:\n          response = _context4.sent;\n          _context4.next = 10;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](1);\n          return _context4.abrupt(\"return\", _context4.t0.response.data.messeage);\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[1, 7]], Promise);\n};","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/http/todoAPI.ts"],"names":["authInstance","fetchTodoError","fetchTodos","fetchTodosSuccess","addTodo","getTodos","id","dispatch","get","data","addTodos","todo","post","response","messeage","checkTodos","checked","console","log","deleteTodos","delete"],"mappings":";AAAA,SAASA,YAAT;AAEA,SAASC,cAAT,EAAyBC,UAAzB,EAAqCC,iBAArC,EAAwDC,OAAxD;AAIA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAA6B;AAAA,MAA3BC,EAA2B,QAA3BA,EAA2B;AACnD,SAAO,iBAAOC,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHA,YAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR;AAFG;AAAA,6CAGoBF,YAAY,CAACQ,GAAb,0BACEF,EADF,CAHpB;;AAAA;AAAA;AAGKG,YAAAA,IAHL,yBAGKA,IAHL;AAMHF,YAAAA,QAAQ,CAACJ,iBAAiB,CAACM,IAAD,CAAlB,CAAR;AANG;AAAA;;AAAA;AAAA;AAAA;AAQHF,YAAAA,QAAQ,CAACN,cAAc,aAAf,CAAR;;AARG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAWD,CAZM;AAcP,OAAO,IAAMS,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAiB;AACxC,SAAO,kBAAOJ,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAELA,YAAAA,QAAQ,CAACH,OAAO,CAACO,IAAD,CAAR,CAAR;AAFK;AAAA,6CAGkBX,YAAY,CAACY,IAAb,uBACDD,IADC,CAHlB;;AAAA;AAGCE,YAAAA,QAHD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOLN,YAAAA,QAAQ,CAACN,cAAc,CAAC,aAAEY,QAAF,CAAWJ,IAAX,CAAgBK,QAAjB,CAAf,CAAR;;AAPK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAUC,CAXK;AAcN,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQT,UAAAA,EAAR,SAAQA,EAAR,EAAYU,OAAZ,SAAYA,OAAZ;AAAA;AAAA;AAAA,2CAEDhB,YAAY,CAACY,IAAb,yBACC;AACvBN,YAAAA,EAAE,EAAFA,EADuB;AAEvBU,YAAAA,OAAO,EAAPA;AAFuB,WADD,CAFC;;AAAA;AAElBH,UAAAA,QAFkB;AAQxBI,UAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACJ,IAAT,CAAcO,OAA1B;AARwB;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAUlB,aAAEH,QAAF,CAAWJ,IAAX,CAAgBK,QAVE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAcP,OAAO,IAAMK,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQb,UAAAA,EAAR,SAAQA,EAAR;AAAA;AAAA;AAAA,2CAEFN,YAAY,CAACoB,MAAb,4BACEd,EADF,CAFE;;AAAA;AAEnBO,UAAAA,QAFmB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAMnB,aAAEA,QAAF,CAAWJ,IAAX,CAAgBK,QANG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB","sourcesContent":["import { authInstance } from \"./index\";\r\nimport { AppDispatch } from \"../store/store\";\r\nimport { fetchTodoError, fetchTodos, fetchTodosSuccess, addTodo, deleteTodo, checkTodo } from \"../store/todoSlice\";\r\nimport { ITodo } from \"../interfaces/ITodo\";\r\nimport { IUser } from \"../interfaces/IUser\";\r\n\r\nexport const getTodos = ({id}: Pick<IUser, \"id\">) => {\r\n  return async (dispatch: AppDispatch) => {\r\n    try {\r\n      dispatch(fetchTodos());\r\n      const { data } = await authInstance.get<ITodo[]>(\r\n        `/api/todos/getTodos/${id}`\r\n      );\r\n      dispatch(fetchTodosSuccess(data));\r\n    } catch (e: any) {\r\n      dispatch(fetchTodoError(e));\r\n    }\r\n  };\r\n};\r\n\r\nexport const addTodos = (todo: ITodo) => {\r\n\treturn async (dispatch: AppDispatch) => {\r\n\t  try {\r\n\t\t dispatch(addTodo(todo));\r\n\t\t const response = await authInstance.post<ITodo>(\r\n\t\t\t`/api/todos/addTodo`, todo\r\n\t\t );\r\n\t  } catch (e: any) {\r\n\t\t dispatch(fetchTodoError(e.response.data.messeage));\r\n\t  }\r\n\t};\r\n };\r\n\r\n\r\n export const checkTodos = async ({id, checked}: Pick<ITodo, \"id\" | \"checked\">) => {\r\n\t  try {\r\n\t\t const response = await authInstance.post(\r\n\t\t\t`/api/todos/checkTodo`, {\r\n\t\t\t\tid,\r\n\t\t\t\tchecked\r\n\t\t\t}\r\n\t\t );\r\n\t\t console.log(response.data.checked);\r\n\t  } catch (e: any) {\r\n\t\treturn e.response.data.messeage\r\n\t  }\r\n };\r\n\r\n export const deleteTodos = async ({id}: Pick<ITodo, \"id\">) => {\r\n\t  try {\r\n\t\t const response = await authInstance.delete<ITodo>(\r\n\t\t\t`/api/todos/deleteTodo/${id}`\r\n\t\t );\r\n\t  } catch (e: any) {\r\n\t\treturn e.response.data.messeage\r\n\t\t \r\n\t  }\r\n\t\r\n };\r\n"]},"metadata":{},"sourceType":"module"}