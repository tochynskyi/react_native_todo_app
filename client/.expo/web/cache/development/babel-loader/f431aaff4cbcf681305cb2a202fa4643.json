{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nvar initialState = {\n  loadingTodos: false,\n  todos: [],\n  todoError: \"\"\n};\nvar todoSlice = createSlice({\n  name: \"todo\",\n  initialState: initialState,\n  reducers: {\n    fetchTodos: function fetchTodos(state) {\n      state.loadingTodos = true;\n    },\n    fetchTodosSuccess: function fetchTodosSuccess(state, action) {\n      state.loadingTodos = false;\n      state.todos = action.payload;\n    },\n    fetchTodoError: function fetchTodoError(state, action) {\n      state.loadingTodos = false;\n      state.todoError = action.payload;\n    },\n    addTodo: function addTodo(state, action) {\n      state.todos.push(action.payload);\n    },\n    checkTodo: function checkTodo(state, action) {\n      state.todos.map(function (todo) {\n        return todo.id === action.payload && (todo.checked = !todo.checked);\n      });\n    },\n    deleteTodo: function deleteTodo(state, action) {\n      state.todos.filter(function (todo) {\n        return todo.id != action.payload;\n      });\n    }\n  }\n});\nvar _todoSlice$actions = todoSlice.actions,\n    fetchTodos = _todoSlice$actions.fetchTodos,\n    fetchTodosSuccess = _todoSlice$actions.fetchTodosSuccess,\n    fetchTodoError = _todoSlice$actions.fetchTodoError,\n    addTodo = _todoSlice$actions.addTodo,\n    checkTodo = _todoSlice$actions.checkTodo,\n    deleteTodo = _todoSlice$actions.deleteTodo;\nexport { fetchTodos, fetchTodosSuccess, fetchTodoError, addTodo, checkTodo, deleteTodo };\nexport default todoSlice.reducer;","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/store/todoSlice.ts"],"names":["createSlice","initialState","loadingTodos","todos","todoError","todoSlice","name","reducers","fetchTodos","state","fetchTodosSuccess","action","payload","fetchTodoError","addTodo","push","checkTodo","map","todo","id","checked","deleteTodo","filter","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AASA,IAAMC,YAAuB,GAAG;AAC9BC,EAAAA,YAAY,EAAE,KADgB;AAE9BC,EAAAA,KAAK,EAAE,EAFuB;AAG9BC,EAAAA,SAAS,EAAE;AAHmB,CAAhC;AAMA,IAAMC,SAAS,GAAGL,WAAW,CAAC;AAC5BM,EAAAA,IAAI,EAAE,MADsB;AAE5BL,EAAAA,YAAY,EAAZA,YAF4B;AAG5BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UADQ,sBACGC,KADH,EACU;AAChBA,MAAAA,KAAK,CAACP,YAAN,GAAqB,IAArB;AACD,KAHO;AAIRQ,IAAAA,iBAJQ,6BAIUD,KAJV,EAIiBE,MAJjB,EAIiD;AACvDF,MAAAA,KAAK,CAACP,YAAN,GAAqB,KAArB;AACJO,MAAAA,KAAK,CAACN,KAAN,GAAcQ,MAAM,CAACC,OAArB;AACG,KAPO;AAQVC,IAAAA,cARU,0BAQMJ,KARN,EAQaE,MARb,EAQ4C;AACtDF,MAAAA,KAAK,CAACP,YAAN,GAAqB,KAArB;AACAO,MAAAA,KAAK,CAACL,SAAN,GAAkBO,MAAM,CAACC,OAAzB;AACC,KAXS;AAYRE,IAAAA,OAZQ,mBAYAL,KAZA,EAYOE,MAZP,EAYqC;AAC/CF,MAAAA,KAAK,CAACN,KAAN,CAAYY,IAAZ,CAAiBJ,MAAM,CAACC,OAAxB;AACG,KAdO;AAeVI,IAAAA,SAfU,qBAeAP,KAfA,EAeOE,MAfP,EAesC;AAChDF,MAAAA,KAAK,CAACN,KAAN,CAAYc,GAAZ,CAAgB,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACC,OAAnB,KAA+BM,IAAI,CAACE,OAAL,GAAe,CAACF,IAAI,CAACE,OAApD,CAAJ;AAAA,OAApB;AAEC,KAlBS;AAmBRC,IAAAA,UAnBQ,sBAmBGZ,KAnBH,EAmBUE,MAnBV,EAmByC;AAC/CF,MAAAA,KAAK,CAACN,KAAN,CAAYmB,MAAZ,CAAmB,UAAAJ,IAAI;AAAA,eAAIA,IAAI,CAACC,EAAL,IAAWR,MAAM,CAACC,OAAtB;AAAA,OAAvB;AACD;AArBO;AAHkB,CAAD,CAA7B;AA4BO,yBAAwFP,SAAS,CAACkB,OAAlG;AAAA,IAAOf,UAAP,sBAAOA,UAAP;AAAA,IAAmBE,iBAAnB,sBAAmBA,iBAAnB;AAAA,IAAsCG,cAAtC,sBAAsCA,cAAtC;AAAA,IAAsDC,OAAtD,sBAAsDA,OAAtD;AAAA,IAA+DE,SAA/D,sBAA+DA,SAA/D;AAAA,IAA0EK,UAA1E,sBAA0EA,UAA1E;;AACP,eAAehB,SAAS,CAACmB,OAAzB","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { ITodo } from \"../interfaces/ITodo\";\r\n\r\ninterface TodoState {\r\n\tloadingTodos: boolean;\r\n  todos: ITodo[];\r\n  todoError: string;\r\n}\r\n\r\nconst initialState: TodoState = {\r\n  loadingTodos: false,\r\n  todos: [],\r\n  todoError: \"\",\r\n};\r\n\r\nconst todoSlice = createSlice({\r\n  name: \"todo\",\r\n  initialState,\r\n  reducers: {\r\n    fetchTodos(state) {\r\n      state.loadingTodos = true;\r\n    },\r\n    fetchTodosSuccess(state, action: PayloadAction<ITodo[]>) {\r\n      state.loadingTodos = false;\r\n\t\tstate.todos = action.payload\r\n    },\r\n\t fetchTodoError (state, action: PayloadAction<string>) {\r\n\t\tstate.loadingTodos = false;\r\n\t\tstate.todoError = action.payload\r\n\t },\r\n    addTodo(state, action: PayloadAction<ITodo>) {\r\n\t\tstate.todos.push(action.payload)\r\n    },\r\n\t checkTodo(state, action: PayloadAction<string>) {\r\n\t\tstate.todos.map(todo => todo.id === action.payload && (todo.checked = !todo.checked)\r\n\t\t)\r\n\t },\r\n    deleteTodo(state, action: PayloadAction<string>) {\r\n      state.todos.filter(todo => todo.id != action.payload)\r\n    },\r\n  },\r\n});\r\n\r\nexport const {fetchTodos, fetchTodosSuccess, fetchTodoError, addTodo, checkTodo, deleteTodo} = todoSlice.actions;\r\nexport default todoSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}