{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport List from \"../components/List\";\nimport TodoForm from \"../components/TodoForm\";\nimport { getTodosDB } from \"../http/todoAPI\";\nimport { logout } from \"../http/userAPI\";\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\nimport { fetchTodoError, fetchTodos, fetchTodosSuccess } from \"../store/todoSlice\";\nimport { userLogout } from \"../store/userSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Todo = function Todo() {\n  var _useAppSelector = useAppSelector(function (state) {\n    return state.user;\n  }),\n      loading = _useAppSelector.loading,\n      user = _useAppSelector.user,\n      userError = _useAppSelector.userError;\n\n  var _useAppSelector2 = useAppSelector(function (state) {\n    return state.todo;\n  }),\n      loadingTodos = _useAppSelector2.loadingTodos,\n      todos = _useAppSelector2.todos,\n      todoError = _useAppSelector2.todoError;\n\n  var dispatch = useAppDispatch();\n\n  var onLogout = function onLogout() {\n    return _regeneratorRuntime.async(function onLogout$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            logout();\n            dispatch(userLogout());\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    var getTodosFromDB = function getTodosFromDB() {\n      var _todos;\n\n      return _regeneratorRuntime.async(function getTodosFromDB$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n\n              if (!user) {\n                _context2.next = 7;\n                break;\n              }\n\n              dispatch(fetchTodos());\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(getTodosDB(user));\n\n            case 5:\n              _todos = _context2.sent;\n              dispatch(fetchTodosSuccess(_todos));\n\n            case 7:\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](0);\n              dispatch(fetchTodoError(_context2.t0.response.data.message));\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 9]], Promise);\n    };\n\n    getTodosFromDB();\n  }, []);\n  return _jsxs(View, {\n    children: [!!todoError && _jsx(Text, {\n      children: todoError\n    }), !!userError && _jsx(Text, {\n      children: userError\n    }), !!loading || !!loadingTodos && _jsx(Text, {\n      children: \"Loading...\"\n    }), _jsx(TodoForm, {}), _jsx(List, {\n      todos: todos\n    }), _jsx(Button, {\n      title: \"Log out\",\n      onPress: onLogout\n    })]\n  });\n};\n\nexport default Todo;","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/pages/Todo.tsx"],"names":["React","useEffect","List","TodoForm","getTodosDB","logout","useAppDispatch","useAppSelector","fetchTodoError","fetchTodos","fetchTodosSuccess","userLogout","Todo","state","user","loading","userError","todo","loadingTodos","todos","todoError","dispatch","onLogout","getTodosFromDB","response","data","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AASA,OAAOC,IAAP;AACA,OAAOC,QAAP;AACA,SAASC,UAAT;AACA,SAASC,MAAT;AAEA,SAASC,cAAT,EAAyBC,cAAzB;AACA,SACEC,cADF,EAEEC,UAFF,EAGEC,iBAHF;AAKA,SAASC,UAAT;;;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,wBAAqCL,cAAc,CAAC,UAACM,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAAnD;AAAA,MAAQC,OAAR,mBAAQA,OAAR;AAAA,MAAiBD,IAAjB,mBAAiBA,IAAjB;AAAA,MAAuBE,SAAvB,mBAAuBA,SAAvB;;AACA,yBAA2CT,cAAc,CACvD,UAACM,KAAD;AAAA,WAAWA,KAAK,CAACI,IAAjB;AAAA,GADuD,CAAzD;AAAA,MAAQC,YAAR,oBAAQA,YAAR;AAAA,MAAsBC,KAAtB,oBAAsBA,KAAtB;AAAA,MAA6BC,SAA7B,oBAA6BA,SAA7B;;AAGA,MAAMC,QAAQ,GAAGf,cAAc,EAA/B;;AAEA,MAAMgB,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AACfjB,YAAAA,MAAM;AACNgB,YAAAA,QAAQ,CAACV,UAAU,EAAX,CAAR;;AAFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAKAV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMsB,cAAc,GAAG,SAAjBA,cAAiB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kBAEd,CAACT,IAFa;AAAA;AAAA;AAAA;;AAGjBO,cAAAA,QAAQ,CAACZ,UAAU,EAAX,CAAR;AAHiB;AAAA,+CAIGL,UAAU,CAACU,IAAD,CAJb;;AAAA;AAIXK,cAAAA,MAJW;AAKjBE,cAAAA,QAAQ,CAACX,iBAAiB,CAACS,MAAD,CAAlB,CAAR;;AALiB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQnBE,cAAAA,QAAQ,CAACb,cAAc,CAAC,aAAEgB,QAAF,CAAWC,IAAX,CAAgBC,OAAjB,CAAf,CAAR;;AARmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvB;;AAWAH,IAAAA,cAAc;AACf,GAbQ,EAaN,EAbM,CAAT;AAeA,SACE,MAAC,IAAD;AAAA,eACG,CAAC,CAACH,SAAF,IAAe,KAAC,IAAD;AAAA,gBAAOA;AAAP,MADlB,EAEG,CAAC,CAACJ,SAAF,IAAe,KAAC,IAAD;AAAA,gBAAOA;AAAP,MAFlB,EAGG,CAAC,CAACD,OAAF,IAAc,CAAC,CAACG,YAAF,IAAkB,KAAC,IAAD;AAAA;AAAA,MAHnC,EAIE,KAAC,QAAD,KAJF,EAKE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEC;AAAb,MALF,EAME,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAwB,MAAA,OAAO,EAAEG;AAAjC,MANF;AAAA,IADF;AAUD,CArCD;;AAuCA,eAAeV,IAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  Pressable,\r\n  Button,\r\n} from \"react-native\";\r\nimport List from \"../components/List\";\r\nimport TodoForm from \"../components/TodoForm\";\r\nimport { getTodosDB } from \"../http/todoAPI\";\r\nimport { logout } from \"../http/userAPI\";\r\nimport { ITodo } from \"../interfaces/ITodo\";\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\r\nimport {\r\n  fetchTodoError,\r\n  fetchTodos,\r\n  fetchTodosSuccess,\r\n} from \"../store/todoSlice\";\r\nimport { userLogout } from \"../store/userSlice\";\r\n\r\nconst Todo = () => {\r\n  const { loading, user, userError } = useAppSelector((state) => state.user);\r\n  const { loadingTodos, todos, todoError } = useAppSelector(\r\n    (state) => state.todo\r\n  );\r\n  const dispatch = useAppDispatch();\r\n\r\n  const onLogout = async () => {\r\n    logout();\r\n    dispatch(userLogout());\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getTodosFromDB = async () => {\r\n      try {\r\n        if (!!user) {\r\n          dispatch(fetchTodos());\r\n          const todos = await getTodosDB(user);\r\n          dispatch(fetchTodosSuccess(todos));\r\n        }\r\n      } catch (e: any) {\r\n        dispatch(fetchTodoError(e.response.data.message));\r\n      }\r\n    };\r\n    getTodosFromDB();\r\n  }, []);\r\n\r\n  return (\r\n    <View>\r\n      {!!todoError && <Text>{todoError}</Text>}\r\n      {!!userError && <Text>{userError}</Text>}\r\n      {!!loading || (!!loadingTodos && <Text>Loading...</Text>)}\r\n      <TodoForm />\r\n      <List todos={todos} />\r\n      <Button title=\"Log out\" onPress={onLogout} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n"]},"metadata":{},"sourceType":"module"}