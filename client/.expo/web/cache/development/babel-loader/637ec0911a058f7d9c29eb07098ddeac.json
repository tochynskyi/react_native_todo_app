{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { useAppDispatch } from \"../store/hooks\";\nimport { logout } from \"../http/userAPI\";\nimport { userLogout } from \"../store/userSlice\";\nimport ModalDropdown from 'react-native-modal-dropdown';\nimport { sortByDate, sortByPriority } from \"../store/todoSlice\";\nimport dayjs from 'dayjs';\nimport { globalStyles } from \"../styles/global\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar sortOptions = ['Date', 'Priority'];\nexport var Header = function Header() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      sort = _useState2[0],\n      setSort = _useState2[1];\n\n  var dispatch = useAppDispatch();\n\n  var onLogout = function onLogout() {\n    return _regeneratorRuntime.async(function onLogout$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            logout();\n            dispatch(userLogout());\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  console.log(sort);\n  useEffect(function () {\n    if (sort === 'Priority') {\n      dispatch(sortByPriority());\n      return;\n    }\n\n    if (sort === 'Date') {\n      dispatch(sortByDate());\n      return;\n    }\n  }, [sort]);\n  return _jsxs(View, {\n    style: [styles.container, globalStyles.primaryBg],\n    children: [_jsx(View, {\n      style: styles.titleWrapper,\n      children: _jsxs(Text, {\n        style: [styles.title, globalStyles.grayTxt],\n        children: [\"Today \", dayjs().format('DD MMM')]\n      })\n    }), _jsx(ModalDropdown, {\n      defaultValue: \"Sort by\",\n      options: sortOptions,\n      onSelect: function onSelect(idx, value) {\n        return setSort(value);\n      },\n      style: styles.sortModal\n    }), _jsx(Pressable, {\n      onPress: onLogout,\n      children: _jsx(Text, {\n        children: \"Exit\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    borderColor: \"#e4e3e3\",\n    borderBottomWidth: 1,\n    paddingTop: 30,\n    paddingHorizontal: 10,\n    paddingBottom: 10,\n    width: \"100%\"\n  },\n  titleWrapper: {\n    flex: 1\n  },\n  title: {\n    fontSize: 16,\n    fontWeight: '500'\n  },\n  sortModal: {\n    borderWidth: 1,\n    marginRight: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/components/Header.tsx"],"names":["React","useEffect","useState","useAppDispatch","logout","userLogout","ModalDropdown","sortByDate","sortByPriority","dayjs","globalStyles","sortOptions","Header","sort","setSort","dispatch","onLogout","console","log","styles","container","primaryBg","titleWrapper","title","grayTxt","format","idx","value","sortModal","StyleSheet","create","display","flexDirection","alignItems","borderColor","borderBottomWidth","paddingTop","paddingHorizontal","paddingBottom","width","flex","fontSize","fontWeight","borderWidth","marginRight"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;AAEA,SAASC,cAAT;AACA,SAASC,MAAT;AACA,SAASC,UAAT;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAASC,UAAT,EAAqBC,cAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT;;;AAEA,IAAMC,WAAW,GAAG,CAAC,MAAD,EAAS,UAAT,CAApB;AAEA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AAC3B,kBAAwBV,QAAQ,CAAS,EAAT,CAAhC;AAAA;AAAA,MAAOW,IAAP;AAAA,MAAaC,OAAb;;AACA,MAAMC,QAAQ,GAAGZ,cAAc,EAA/B;;AAEA,MAAMa,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AACfZ,YAAAA,MAAM;AACNW,YAAAA,QAAQ,CAACV,UAAU,EAAX,CAAR;;AAFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAIAY,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AAEAZ,EAAAA,SAAS,CAAC,YAAM;AACf,QAAIY,IAAI,KAAK,UAAb,EAAyB;AACxBE,MAAAA,QAAQ,CAACP,cAAc,EAAf,CAAR;AACA;AACA;;AACD,QAAIK,IAAI,KAAK,MAAb,EAAqB;AACpBE,MAAAA,QAAQ,CAACR,UAAU,EAAX,CAAR;AACA;AACA;AACD,GATQ,EASN,CAACM,IAAD,CATM,CAAT;AAUC,SACA,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACM,MAAM,CAACC,SAAR,EAAmBV,YAAY,CAACW,SAAhC,CAAb;AAAA,eACC,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEF,MAAM,CAACG,YAApB;AAAA,gBAAkC,MAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACH,MAAM,CAACI,KAAR,EAAeb,YAAY,CAACc,OAA5B,CAAb;AAAA,6BAA0Df,KAAK,GAAGgB,MAAR,CAAe,QAAf,CAA1D;AAAA;AAAlC,MADD,EAEC,KAAC,aAAD;AACS,MAAA,YAAY,EAAC,SADtB;AAES,MAAA,OAAO,EAAEd,WAFlB;AAGS,MAAA,QAAQ,EAAE,kBAACe,GAAD,EAAMC,KAAN;AAAA,eAAgBb,OAAO,CAACa,KAAD,CAAvB;AAAA,OAHnB;AAIC,MAAA,KAAK,EAAER,MAAM,CAACS;AAJf,MAFD,EAQI,KAAC,SAAD;AAAW,MAAA,OAAO,EAAEZ,QAApB;AAAA,gBACH,KAAC,IAAD;AAAA;AAAA;AADG,MARJ;AAAA,IADA;AAeD,CAnCM;AAsCP,IAAMG,MAAM,GAAGU,UAAU,CAACC,MAAX,CAAkB;AAChCV,EAAAA,SAAS,EAAE;AACTW,IAAAA,OAAO,EAAE,MADA;AAETC,IAAAA,aAAa,EAAE,KAFN;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,WAAW,EAAE,SAJJ;AAKTC,IAAAA,iBAAiB,EAAE,CALV;AAMTC,IAAAA,UAAU,EAAE,EANH;AAOTC,IAAAA,iBAAiB,EAAE,EAPV;AAQTC,IAAAA,aAAa,EAAE,EARN;AASTC,IAAAA,KAAK,EAAE;AATE,GADqB;AAYhCjB,EAAAA,YAAY,EAAE;AACbkB,IAAAA,IAAI,EAAE;AADO,GAZkB;AAehCjB,EAAAA,KAAK,EAAE;AACNkB,IAAAA,QAAQ,EAAE,EADJ;AAENC,IAAAA,UAAU,EAAE;AAFN,GAfyB;AAmBhCd,EAAAA,SAAS,EAAE;AACVe,IAAAA,WAAW,EAAE,CADH;AAEVC,IAAAA,WAAW,EAAE;AAFH;AAnBqB,CAAlB,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { StyleSheet,Button, Text, TextInput, View, Pressable } from \"react-native\";\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\r\nimport { logout } from \"../http/userAPI\";\r\nimport { userLogout } from \"../store/userSlice\";\r\nimport ModalDropdown from 'react-native-modal-dropdown';\r\nimport { sortByDate, sortByPriority } from '../store/todoSlice';\r\nimport dayjs from 'dayjs';\r\nimport { globalStyles } from '../styles/global';\r\n\r\nconst sortOptions = ['Date', 'Priority']\r\n\r\nexport const Header = () => {\r\n\tconst [sort, setSort] = useState<string>('')\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\tconst onLogout = async () => {\r\n\t  logout();\r\n\t  dispatch(userLogout());\r\n\t};\r\n\tconsole.log(sort);\r\n\t\r\n\tuseEffect(() => {\r\n\t\tif (sort === 'Priority') {\r\n\t\t\tdispatch(sortByPriority())\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif (sort === 'Date') {\r\n\t\t\tdispatch(sortByDate())\r\n\t\t\treturn\r\n\t\t}\r\n\t}, [sort])\r\n  return (\r\n\t <View style={[styles.container, globalStyles.primaryBg]}>\r\n\t\t <View style={styles.titleWrapper}><Text style={[styles.title, globalStyles.grayTxt]}>Today {dayjs().format('DD MMM')}</Text></View>\r\n\t\t <ModalDropdown\r\n            defaultValue=\"Sort by\"\r\n            options={sortOptions}\r\n            onSelect={(idx, value) => setSort(value)}\r\n\t\t\t\tstyle={styles.sortModal}\r\n          />\r\n      <Pressable onPress={onLogout}>\r\n\t\t\t<Text>Exit</Text>\r\n\t\t</Pressable>\r\n\t\t\r\n\t </View>\r\n  )\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n\tcontainer: {\r\n\t  display: \"flex\",\r\n\t  flexDirection: \"row\",\r\n\t  alignItems: \"center\",\r\n\t  borderColor: \"#e4e3e3\",\r\n\t  borderBottomWidth: 1,\r\n\t  paddingTop: 30,\r\n\t  paddingHorizontal: 10,\r\n\t  paddingBottom: 10,\r\n\t  width: \"100%\",\r\n\t},\r\n\ttitleWrapper: {\r\n\t\tflex: 1,\r\n\t},\r\n\ttitle: {\r\n\t\tfontSize: 16,\r\n\t\tfontWeight: '500',\r\n\t},\r\n\tsortModal: {\r\n\t\tborderWidth: 1,\r\n\t\tmarginRight: 10\r\n\t}\r\n });"]},"metadata":{},"sourceType":"module"}