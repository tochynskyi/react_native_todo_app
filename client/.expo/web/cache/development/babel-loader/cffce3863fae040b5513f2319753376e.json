{"ast":null,"code":"import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport axios from \"axios\";\nvar TODO_APP_API_URL = \"http://localhost:4000\";\nexport var instance = axios.create({\n  baseURL: TODO_APP_API_URL\n});\nexport var authInstance = axios.create({\n  baseURL: TODO_APP_API_URL\n});\n\nvar authInterceptors = function authInterceptors(config) {\n  var token = AsyncStorage.getItem('token');\n  console.log(token);\n  config.headers.Authorization = \"Bearer \" + token;\n  return config;\n};\n\nauthInstance.interceptors.request.use(authInterceptors);","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/http/index.ts"],"names":["AsyncStorage","axios","TODO_APP_API_URL","instance","create","baseURL","authInstance","authInterceptors","config","token","getItem","console","log","headers","Authorization","interceptors","request","use"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,2CAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAMC,gBAAgB,GAAG,uBAAzB;AAEA,OAAO,IAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CAAa;AACnCC,EAAAA,OAAO,EAAEH;AAD0B,CAAb,CAAjB;AAGP,OAAO,IAAMI,YAAY,GAAGL,KAAK,CAACG,MAAN,CAAa;AACxCC,EAAAA,OAAO,EAAEH;AAD+B,CAAb,CAArB;;AAKP,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,MAAM,EAAI;AAClC,MAAMC,KAAK,GAAGT,YAAY,CAACU,OAAb,CAAqB,OAArB,CAAd;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEAD,EAAAA,MAAM,CAACK,OAAP,CAAeC,aAAf,eAAyCL,KAAzC;AACA,SAAOD,MAAP;AACA,CAND;;AAQAF,YAAY,CAACS,YAAb,CAA0BC,OAA1B,CAAkCC,GAAlC,CAAsCV,gBAAtC","sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport axios from \"axios\";\r\n\r\nconst TODO_APP_API_URL = \"http://localhost:4000\";\r\n\r\nexport const instance = axios.create({\r\n  baseURL: TODO_APP_API_URL,\r\n});\r\nexport const authInstance = axios.create({\r\n\tbaseURL: TODO_APP_API_URL,\r\n });\r\n\r\n\r\nconst authInterceptors = config => {\r\n\tconst token = AsyncStorage.getItem('token')\r\n\tconsole.log(token);\r\n\t\r\n\tconfig.headers.Authorization = `Bearer ${token}`\r\n\treturn config\r\n}\r\n\r\nauthInstance.interceptors.request.use(authInterceptors)\r\n"]},"metadata":{},"sourceType":"module"}