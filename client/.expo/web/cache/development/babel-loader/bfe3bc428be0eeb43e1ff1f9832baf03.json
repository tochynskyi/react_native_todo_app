{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { instance } from \"./index\";\nimport jwtDecode from \"jwt-decode\";\nexport var registration = function registration(username, password) {\n  var _await$instance$post, data;\n\n  return _regeneratorRuntime.async(function registration$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(instance.post(\"/api/user/registration\", {\n            username: username,\n            password: password\n          }));\n\n        case 2:\n          _await$instance$post = _context.sent;\n          data = _await$instance$post.data;\n          console.log(data);\n          return _context.abrupt(\"return\", jwtDecode(data.token));\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var login = function login(username, password) {\n  var _await$instance$post2, data;\n\n  return _regeneratorRuntime.async(function login$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(instance.post(\"/api/user/login\", {\n            username: username,\n            password: password\n          }));\n\n        case 2:\n          _await$instance$post2 = _context2.sent;\n          data = _await$instance$post2.data;\n          return _context2.abrupt(\"return\", jwtDecode(data.token));\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var check = function check() {\n  var response;\n  return _regeneratorRuntime.async(function check$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(instance.get(\"/api/user/auth\"));\n\n        case 2:\n          response = _context3.sent;\n          return _context3.abrupt(\"return\", response);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/http/userAPI.ts"],"names":["instance","jwtDecode","registration","username","password","post","data","console","log","token","login","check","get","response"],"mappings":";AAAA,SAASA,QAAT;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAC1BC,QAD0B,EAE1BC,QAF0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAIHJ,QAAQ,CAACK,IAAT,CAAc,wBAAd,EAAwC;AAC7DF,YAAAA,QAAQ,EAARA,QAD6D;AAE7DC,YAAAA,QAAQ,EAARA;AAF6D,WAAxC,CAJG;;AAAA;AAAA;AAIlBE,UAAAA,IAJkB,wBAIlBA,IAJkB;AAQ1BC,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAR0B,2CAUnBL,SAAS,CAACK,IAAI,CAACG,KAAN,CAVU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;AAaP,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CACnBP,QADmB,EAEnBC,QAFmB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAISJ,QAAQ,CAACK,IAAT,CAAc,iBAAd,EAAiC;AAC3DF,YAAAA,QAAQ,EAARA,QAD2D;AAE3DC,YAAAA,QAAQ,EAARA;AAF2D,WAAjC,CAJT;;AAAA;AAAA;AAIXE,UAAAA,IAJW,yBAIXA,IAJW;AAAA,4CAQZL,SAAS,CAACK,IAAI,CAACG,KAAN,CARG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;AAWP,OAAO,IAAME,KAAK,GAAG,SAARA,KAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACIX,QAAQ,CAACY,GAAT,CAAa,gBAAb,CADJ;;AAAA;AACbC,UAAAA,QADa;AAAA,4CAEZA,QAFY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd","sourcesContent":["import { instance } from \"./index\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport const registration = async (\r\n  username: string | number,\r\n  password: string | number\r\n) => {\r\n  const { data } = await instance.post(\"/api/user/registration\", {\r\n    username,\r\n    password,\r\n  });\r\n  console.log(data);\r\n  \r\n  return jwtDecode(data.token);\r\n};\r\n\r\nexport const login = async (\r\n  username: string | number,\r\n  password: string | number\r\n) => {\r\n  const { data }: any = await instance.post(\"/api/user/login\", {\r\n    username,\r\n    password,\r\n  });\r\n  return jwtDecode(data.token);\r\n};\r\n\r\nexport const check = async () => {\r\n  const response = await instance.get(\"/api/user/auth\");\r\n  return response;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}