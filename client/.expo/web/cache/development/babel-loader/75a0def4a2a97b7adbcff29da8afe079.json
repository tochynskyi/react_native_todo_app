{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from \"expo-status-bar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Auth from \"./Auth\";\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\nimport Todo from \"./Todo\";\nimport { check } from \"../http/userAPI\";\nimport { useEffect } from \"react\";\nimport { userLogin, userLoginSuccess } from \"../store/userSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Main = function Main() {\n  var _useAppSelector = useAppSelector(function (state) {\n    return state.user;\n  }),\n      isAuth = _useAppSelector.isAuth;\n\n  var dispatch = useAppDispatch();\n  useEffect(function () {\n    var checkUser = function checkUser() {\n      var user;\n      return _regeneratorRuntime.async(function checkUser$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              dispatch(userLogin());\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(check());\n\n            case 4:\n              user = _context.sent;\n              dispatch(userLoginSuccess(user));\n              _context.next = 10;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    };\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(StatusBar, {\n      style: \"auto\"\n    }), isAuth ? _jsx(Todo, {}) : _jsx(Auth, {})]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#202020\",\n    padding: 10\n  }\n});\nexport default Main;","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/pages/Main.tsx"],"names":["StatusBar","Auth","useAppDispatch","useAppSelector","Todo","check","useEffect","userLogin","userLoginSuccess","Main","state","user","isAuth","dispatch","checkUser","styles","container","StyleSheet","create","flex","backgroundColor","padding"],"mappings":";AAAA,SAASA,SAAT,QAA0B,iBAA1B;;;AAEA,OAAOC,IAAP;AACA,SAASC,cAAT,EAAyBC,cAAzB;AACA,OAAOC,IAAP;AACA,SAASC,KAAT;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,EAAoBC,gBAApB;;;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,wBAAmBN,cAAc,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAAjC;AAAA,MAAQC,MAAR,mBAAQA,MAAR;;AACA,MAAMC,QAAQ,GAAGX,cAAc,EAA/B;AAEAI,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMQ,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnBD,cAAAA,QAAQ,CAACN,SAAS,EAAV,CAAR;AAFmB;AAAA,+CAGAF,KAAK,EAHL;;AAAA;AAGbM,cAAAA,IAHa;AAInBE,cAAAA,QAAQ,CAACL,gBAAgB,CAACG,IAAD,CAAjB,CAAR;AAJmB;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;AAUD,GAXQ,EAWN,EAXM,CAAT;AAaA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEI,MAAM,CAACC,SAApB;AAAA,eACE,KAAC,SAAD;AAAW,MAAA,KAAK,EAAC;AAAjB,MADF,EAEGJ,MAAM,GAAG,KAAC,IAAD,KAAH,GAAc,KAAC,IAAD,KAFvB;AAAA,IADF;AAMD,CAvBD;;AAyBA,IAAMG,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,SAFR;AAGTC,IAAAA,OAAO,EAAE;AAHA;AADoB,CAAlB,CAAf;AAQA,eAAeZ,IAAf","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport Auth from \"./Auth\";\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\r\nimport Todo from \"./Todo\";\r\nimport { check } from \"../http/userAPI\";\r\nimport { useEffect } from \"react\";\r\nimport { userLogin, userLoginSuccess } from \"../store/userSlice\";\r\n\r\nconst Main = () => {\r\n  const { isAuth } = useAppSelector((state) => state.user);\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    const checkUser = async () => {\r\n\t\t try {\r\n\t\t\tdispatch(userLogin());\r\n\t\t\tconst user = await check();\r\n\t\t\tdispatch(userLoginSuccess(user));\r\n\t\t } catch (e) {\r\n\t\t\t \r\n\t\t }\r\n      \r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <StatusBar style=\"auto\" />\r\n      {isAuth ? <Todo /> : <Auth />}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#202020\",\r\n    padding: 10,\r\n  },\r\n});\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}