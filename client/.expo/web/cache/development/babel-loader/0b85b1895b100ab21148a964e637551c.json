{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { addTodosDB } from \"../http/todoAPI\";\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\nimport { addTodo, fetchTodoError } from \"../store/todoSlice\";\nimport { getDate } from \"../utils/getDate\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar TodoForm = function TodoForm() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isOpen = _useState4[0],\n      setIsOpen = _useState4[1];\n\n  var _useAppSelector = useAppSelector(function (state) {\n    return state.user;\n  }),\n      user = _useAppSelector.user;\n\n  var dispatch = useAppDispatch();\n\n  var createTodo = function createTodo() {\n    var newTodo;\n    return _regeneratorRuntime.async(function createTodo$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!(value && user)) {\n              _context.next = 7;\n              break;\n            }\n\n            newTodo = {\n              id: Date.now().toString(),\n              author: user == null ? void 0 : user.id,\n              checked: false,\n              title: value,\n              priority: \"High\",\n              date: getDate().day + \" \" + getDate().month\n            };\n            dispatch(addTodo(newTodo));\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(addTodosDB(newTodo));\n\n          case 6:\n            setValue(\"\");\n\n          case 7:\n            return _context.abrupt(\"return\", console.log(\"Todo must have title\"));\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch(fetchTodoError(_context.t0));\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  return _jsx(View, {\n    children: isOpen ? _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(TextInput, {\n        onChangeText: function onChangeText(text) {\n          return setValue(text);\n        },\n        value: value,\n        style: styles.input\n      }), _jsx(Button, {\n        color: \"#3b00a8\",\n        title: \"Add todo\",\n        onPress: createTodo\n      })]\n    }) : _jsxs(Pressable, {\n      onPress: function onPress() {\n        return setIsOpen(!isOpen);\n      },\n      children: [_jsx(Text, {\n        children: \"Open\"\n      }), _jsx(Pressable, {\n        onPress: function onPress() {\n          return setIsOpen(!isOpen);\n        },\n        children: _jsx(Text, {\n          children: \"Open\"\n        })\n      })]\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: 15\n  },\n  title: {\n    fontSize: 30,\n    fontWeight: \"700\",\n    color: \"#e4e3e3\"\n  },\n  input: {\n    padding: 10,\n    backgroundColor: \"#e4e3e3\",\n    borderRadius: 20,\n    width: \"100\",\n    height: 50,\n    marginBottom: 15\n  }\n});\nexport default TodoForm;","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/components/TodoForm.tsx"],"names":["useState","addTodosDB","useAppDispatch","useAppSelector","addTodo","fetchTodoError","getDate","TodoForm","value","setValue","isOpen","setIsOpen","state","user","dispatch","createTodo","newTodo","id","Date","now","toString","author","checked","title","priority","date","day","month","console","log","styles","container","text","input","StyleSheet","create","display","alignItems","marginBottom","fontSize","fontWeight","color","padding","backgroundColor","borderRadius","width","height"],"mappings":";;AAAA,SAAoBA,QAApB,QAAoC,OAApC;;;;;;;AASA,SAASC,UAAT;AAEA,SAASC,cAAT,EAAyBC,cAAzB;AACA,SAASC,OAAT,EAAkBC,cAAlB;AACA,SAASC,OAAT;;;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,kBAA0BP,QAAQ,CAAS,EAAT,CAAlC;AAAA;AAAA,MAAOQ,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAA4BT,QAAQ,CAAU,KAAV,CAApC;AAAA;AAAA,MAAOU,MAAP;AAAA,MAAeC,SAAf;;AACA,wBAAiBR,cAAc,CAAC,UAACS,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAA/B;AAAA,MAAQA,IAAR,mBAAQA,IAAR;;AACA,MAAMC,QAAQ,GAAGZ,cAAc,EAA/B;;AAEA,MAAMa,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kBAEXP,KAAK,IAAIK,IAFE;AAAA;AAAA;AAAA;;AAGPG,YAAAA,OAHO,GAGU;AACrBC,cAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,GAAWC,QAAX,EADiB;AAErBC,cAAAA,MAAM,EAAER,IAAF,oBAAEA,IAAI,CAAEI,EAFO;AAGrBK,cAAAA,OAAO,EAAE,KAHY;AAIrBC,cAAAA,KAAK,EAAEf,KAJc;AAKrBgB,cAAAA,QAAQ,EAAE,MALW;AAMrBC,cAAAA,IAAI,EAAKnB,OAAO,GAAGoB,GAAf,SAAsBpB,OAAO,GAAGqB;AANf,aAHV;AAWbb,YAAAA,QAAQ,CAACV,OAAO,CAACY,OAAD,CAAR,CAAR;AAXa;AAAA,6CAYPf,UAAU,CAACe,OAAD,CAZH;;AAAA;AAabP,YAAAA,QAAQ,CAAC,EAAD,CAAR;;AAba;AAAA,6CAeRmB,OAAO,CAACC,GAAR,CAAY,sBAAZ,CAfQ;;AAAA;AAAA;AAAA;AAiBff,YAAAA,QAAQ,CAACT,cAAc,aAAf,CAAR;;AAjBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAqBA,SACE,KAAC,IAAD;AAAA,cACGK,MAAM,GACL,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEoB,MAAM,CAACC,SAApB;AAAA,iBACE,KAAC,SAAD;AACE,QAAA,YAAY,EAAE,sBAACC,IAAD;AAAA,iBAAUvB,QAAQ,CAACuB,IAAD,CAAlB;AAAA,SADhB;AAEE,QAAA,KAAK,EAAExB,KAFT;AAGE,QAAA,KAAK,EAAEsB,MAAM,CAACG;AAHhB,QADF,EAME,KAAC,MAAD;AAAQ,QAAA,KAAK,EAAE,SAAf;AAA0B,QAAA,KAAK,EAAC,UAAhC;AAA2C,QAAA,OAAO,EAAElB;AAApD,QANF;AAAA,MADK,GAUL,MAAC,SAAD;AAAW,MAAA,OAAO,EAAE;AAAA,eAAMJ,SAAS,CAAC,CAACD,MAAF,CAAf;AAAA,OAApB;AAAA,iBACE,KAAC,IAAD;AAAA;AAAA,QADF,EAEE,KAAC,SAAD;AAAW,QAAA,OAAO,EAAE;AAAA,iBAAMC,SAAS,CAAC,CAACD,MAAF,CAAf;AAAA,SAApB;AAAA,kBACE,KAAC,IAAD;AAAA;AAAA;AADF,QAFF;AAAA;AAXJ,IADF;AAqBD,CAhDD;;AAkDA,IAAMoB,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,OAAO,EAAE,MADA;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,YAAY,EAAE;AAHL,GADoB;AAM/Bf,EAAAA,KAAK,EAAE;AACLgB,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,UAAU,EAAE,KAFP;AAGLC,IAAAA,KAAK,EAAE;AAHF,GANwB;AAW/BR,EAAAA,KAAK,EAAE;AACLS,IAAAA,OAAO,EAAE,EADJ;AAELC,IAAAA,eAAe,EAAE,SAFZ;AAGLC,IAAAA,YAAY,EAAE,EAHT;AAILC,IAAAA,KAAK,EAAE,KAJF;AAKLC,IAAAA,MAAM,EAAE,EALH;AAMLR,IAAAA,YAAY,EAAE;AANT;AAXwB,CAAlB,CAAf;AAqBA,eAAe/B,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Pressable,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  View,\r\n} from \"react-native\";\r\nimport { addTodosDB } from \"../http/todoAPI\";\r\nimport { ITodo } from \"../interfaces/ITodo\";\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\r\nimport { addTodo, fetchTodoError } from \"../store/todoSlice\";\r\nimport { getDate } from \"../utils/getDate\";\r\n\r\nconst TodoForm = () => {\r\n  const [value, setValue] = useState<string>(\"\");\r\n  const [isOpen, setIsOpen] = useState<boolean>(false);\r\n  const { user } = useAppSelector((state) => state.user);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const createTodo = async () => {\r\n    try {\r\n      if (value && user) {\r\n        const newTodo: ITodo = {\r\n          id: Date.now().toString(),\r\n          author: user?.id,\r\n          checked: false,\r\n          title: value,\r\n          priority: \"High\",\r\n          date: `${getDate().day} ${getDate().month}`,\r\n        };\r\n        dispatch(addTodo(newTodo));\r\n        await addTodosDB(newTodo);\r\n        setValue(\"\");\r\n      }\r\n      return console.log(\"Todo must have title\");\r\n    } catch (error: any) {\r\n      dispatch(fetchTodoError(error));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      {isOpen ? (\r\n        <View style={styles.container}>\r\n          <TextInput\r\n            onChangeText={(text) => setValue(text)}\r\n            value={value}\r\n            style={styles.input}\r\n          />\r\n          <Button color={\"#3b00a8\"} title=\"Add todo\" onPress={createTodo} />\r\n        </View>\r\n      ) : (\r\n        <Pressable onPress={() => setIsOpen(!isOpen)}>\r\n          <Text>Open</Text>\r\n          <Pressable onPress={() => setIsOpen(!isOpen)}>\r\n            <Text>Open</Text>\r\n          </Pressable>\r\n        </Pressable>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    marginBottom: 15,\r\n  },\r\n  title: {\r\n    fontSize: 30,\r\n    fontWeight: \"700\",\r\n    color: \"#e4e3e3\",\r\n  },\r\n  input: {\r\n    padding: 10,\r\n    backgroundColor: \"#e4e3e3\",\r\n    borderRadius: 20,\r\n    width: \"100\",\r\n    height: 50,\r\n    marginBottom: 15,\r\n  },\r\n});\r\n\r\nexport default TodoForm;\r\n"]},"metadata":{},"sourceType":"module"}