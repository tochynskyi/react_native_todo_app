{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { authInstance } from \"./index\";\nexport var getTodosDB = function getTodosDB(_ref) {\n  var id, _await$authInstance$g, data;\n\n  return _regeneratorRuntime.async(function getTodosDB$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = _ref.id;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(authInstance.get(\"/api/todos/getTodos/\" + id));\n\n        case 3:\n          _await$authInstance$g = _context.sent;\n          data = _await$authInstance$g.data;\n          return _context.abrupt(\"return\", data);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var addTodosDB = function addTodosDB(todo) {\n  return _regeneratorRuntime.async(function addTodosDB$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(authInstance.post(\"/api/todos/addTodo\", todo));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var checkTodosDB = function checkTodosDB(_ref2) {\n  var id, checked;\n  return _regeneratorRuntime.async(function checkTodosDB$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          id = _ref2.id, checked = _ref2.checked;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(authInstance.post(\"/api/todos/checkTodo\", {\n            id: id,\n            checked: checked\n          }));\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var deleteTodosDB = function deleteTodosDB(_ref3) {\n  var id;\n  return _regeneratorRuntime.async(function deleteTodosDB$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          id = _ref3.id;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(authInstance.delete(\"/api/todos/deleteTodo/\" + id));\n\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/http/todoAPI.ts"],"names":["authInstance","getTodosDB","id","get","data","addTodosDB","todo","post","checkTodosDB","checked","deleteTodosDB","delete"],"mappings":";AAAA,SAASA,YAAT;AAIA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;;AAAA;AAAA;AAAA;AAAA;AACxBC,UAAAA,EADwB,QACxBA,EADwB;AAAA;AAAA,2CAGDF,YAAY,CAACG,GAAb,0BAAiDD,EAAjD,CAHC;;AAAA;AAAA;AAGhBE,UAAAA,IAHgB,yBAGhBA,IAHgB;AAAA,2CAIjBA,IAJiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAOP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAClBN,YAAY,CAACO,IAAb,uBAA+CD,IAA/C,CADkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAIP,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BN,UAAAA,EAD0B,SAC1BA,EAD0B,EAE1BO,OAF0B,SAE1BA,OAF0B;AAAA;AAAA,2CAIpBT,YAAY,CAACO,IAAb,yBAA0C;AAC9CL,YAAAA,EAAE,EAAFA,EAD8C;AAE9CO,YAAAA,OAAO,EAAPA;AAF8C,WAA1C,CAJoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;AAUP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASR,UAAAA,EAAT,SAASA,EAAT;AAAA;AAAA,2CACrBF,YAAY,CAACW,MAAb,4BAAoDT,EAApD,CADqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB","sourcesContent":["import { authInstance } from \"./index\";\r\nimport { ITodo } from \"../interfaces/ITodo\";\r\nimport { IUser } from \"../interfaces/IUser\";\r\n\r\nexport const getTodosDB = async ({\r\n  id,\r\n}: Pick<IUser, \"id\" | {}>): Promise<ITodo[]> => {\r\n  const { data } = await authInstance.get<ITodo[]>(`/api/todos/getTodos/${id}`);\r\n  return data;\r\n};\r\n\r\nexport const addTodosDB = async (todo: ITodo) => {\r\n  await authInstance.post<ITodo>(`/api/todos/addTodo`, todo);\r\n};\r\n\r\nexport const checkTodosDB = async ({\r\n  id,\r\n  checked,\r\n}: Pick<ITodo, \"id\" | \"checked\">) => {\r\n  await authInstance.post(`/api/todos/checkTodo`, {\r\n    id,\r\n    checked,\r\n  });\r\n};\r\n\r\nexport const deleteTodosDB = async ({ id }: Pick<ITodo, \"id\">) => {\r\n  await authInstance.delete<ITodo>(`/api/todos/deleteTodo/${id}`);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}