{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\nimport { addTodo } from \"../store/todoSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar TodoForm = function TodoForm() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useAppSelector = useAppSelector(function (state) {\n    return state.user;\n  }),\n      user = _useAppSelector.user;\n\n  var dispatch = useAppDispatch();\n\n  var createTodo = function createTodo() {\n    var newTodo;\n    return _regeneratorRuntime.async(function createTodo$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              newTodo = {\n                id: Date.now().toString(),\n                author: user == null ? void 0 : user.id,\n                checked: false,\n                title: value\n              };\n              dispatch(addTodo(newTodo));\n              ad;\n              setValue(\"\");\n            } catch (error) {}\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"TODO LIST\"\n    }), _jsx(TextInput, {\n      onChangeText: function onChangeText(text) {\n        return setValue(text);\n      },\n      value: value,\n      style: styles.input\n    }), _jsx(Button, {\n      color: \"#3b00a8\",\n      title: \"Add todo\",\n      onPress: createTodo\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: 15\n  },\n  title: {\n    fontSize: 30,\n    fontWeight: \"700\",\n    color: \"#e4e3e3\"\n  },\n  input: {\n    padding: 10,\n    backgroundColor: \"#e4e3e3\",\n    borderRadius: 20,\n    width: \"100\",\n    height: 50,\n    marginBottom: 15\n  }\n});\nexport default TodoForm;","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/components/TodoForm.tsx"],"names":["useState","useAppDispatch","useAppSelector","addTodo","TodoForm","value","setValue","state","user","dispatch","createTodo","newTodo","id","Date","now","toString","author","checked","title","ad","error","styles","container","text","input","StyleSheet","create","display","alignItems","marginBottom","fontSize","fontWeight","color","padding","backgroundColor","borderRadius","width","height"],"mappings":";;AAAA,SAAoBA,QAApB,QAAoC,OAApC;;;;;;AAIA,SAASC,cAAT,EAAyBC,cAAzB;AACA,SAASC,OAAT;;;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,kBAA0BJ,QAAQ,CAAS,EAAT,CAAlC;AAAA;AAAA,MAAOK,KAAP;AAAA,MAAcC,QAAd;;AACA,wBAAiBJ,cAAc,CAAC,UAACK,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAA/B;AAAA,MAAQA,IAAR,mBAAQA,IAAR;;AACA,MAAMC,QAAQ,GAAGR,cAAc,EAA/B;;AAEA,MAAMS,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAClB,gBAAI;AACCC,cAAAA,OADD,GACkB;AACtBC,gBAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,GAAWC,QAAX,EADkB;AAEtBC,gBAAAA,MAAM,EAAER,IAAF,oBAAEA,IAAI,CAAEI,EAFQ;AAGtBK,gBAAAA,OAAO,EAAE,KAHa;AAItBC,gBAAAA,KAAK,EAAEb;AAJe,eADlB;AAOJI,cAAAA,QAAQ,CAACN,OAAO,CAACQ,OAAD,CAAR,CAAR;AACAQ,cAAAA,EAAE;AACFb,cAAAA,QAAQ,CAAC,EAAD,CAAR;AACC,aAVD,CAUE,OAAOc,KAAP,EAAc,CAEf;;AAbiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAiBA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA,eACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAED,MAAM,CAACH,KAApB;AAAA;AAAA,MADF,EAEE,KAAC,SAAD;AAAW,MAAA,YAAY,EAAE,sBAACK,IAAD;AAAA,eAAUjB,QAAQ,CAACiB,IAAD,CAAlB;AAAA,OAAzB;AAAmD,MAAA,KAAK,EAAElB,KAA1D;AAAiE,MAAA,KAAK,EAAEgB,MAAM,CAACG;AAA/E,MAFF,EAGE,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,SAAf;AAA0B,MAAA,KAAK,EAAC,UAAhC;AAA2C,MAAA,OAAO,EAAEd;AAApD,MAHF;AAAA,IADF;AAOD,CA7BD;;AA+BA,IAAMW,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,OAAO,EAAE,MADA;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,YAAY,EAAE;AAHL,GADoB;AAM/BX,EAAAA,KAAK,EAAE;AACLY,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,UAAU,EAAE,KAFP;AAGLC,IAAAA,KAAK,EAAE;AAHF,GANwB;AAW/BR,EAAAA,KAAK,EAAE;AACLS,IAAAA,OAAO,EAAE,EADJ;AAELC,IAAAA,eAAe,EAAE,SAFZ;AAGLC,IAAAA,YAAY,EAAE,EAHT;AAILC,IAAAA,KAAK,EAAE,KAJF;AAKLC,IAAAA,MAAM,EAAE,EALH;AAMLR,IAAAA,YAAY,EAAE;AANT;AAXwB,CAAlB,CAAf;AAqBA,eAAezB,QAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Button, StyleSheet, Text, TextInput, View } from \"react-native\";\r\nimport { addTodos } from \"../http/todoAPI\";\r\nimport { ITodo } from \"../interfaces/ITodo\";\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\r\nimport { addTodo } from \"../store/todoSlice\";\r\n\r\nconst TodoForm = () => {\r\n  const [value, setValue] = useState<string>(\"\");\r\n  const { user } = useAppSelector((state) => state.user);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const createTodo = async () => {\r\n\t  try {\r\n\t\tconst newTodo: ITodo = {\r\n\t\t\tid: Date.now().toString(),\r\n\t\t\tauthor: user?.id,\r\n\t\t\tchecked: false,\r\n\t\t\ttitle: value,\r\n\t\t };\r\n\t\t dispatch(addTodo(newTodo));\r\n\t\t ad\r\n\t\t setValue(\"\");\r\n\t  } catch (error) {\r\n\t\t  \r\n\t  }\r\n    \r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>TODO LIST</Text>\r\n      <TextInput onChangeText={(text) => setValue(text)} value={value} style={styles.input} />\r\n      <Button color={\"#3b00a8\"} title=\"Add todo\" onPress={createTodo} />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    marginBottom: 15,\r\n  },\r\n  title: {\r\n    fontSize: 30,\r\n    fontWeight: \"700\",\r\n    color: \"#e4e3e3\",\r\n  },\r\n  input: {\r\n    padding: 10,\r\n    backgroundColor: \"#e4e3e3\",\r\n    borderRadius: 20,\r\n    width: \"100\",\r\n    height: 50,\r\n    marginBottom: 15,\r\n  },\r\n});\r\n\r\nexport default TodoForm;\r\n"]},"metadata":{},"sourceType":"module"}