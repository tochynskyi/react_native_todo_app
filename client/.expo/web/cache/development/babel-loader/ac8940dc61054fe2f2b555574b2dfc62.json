{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { authInstance } from \"./index\";\nexport var getTodosDB = function getTodosDB(_ref) {\n  var id, _await$authInstance$g, data;\n\n  return _regeneratorRuntime.async(function getTodosDB$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          id = _ref.id;\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(authInstance.get(\"/api/todos/getTodos/\" + id));\n\n        case 4:\n          _await$authInstance$g = _context.sent;\n          data = _await$authInstance$g.data;\n          return _context.abrupt(\"return\", data);\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          return _context.abrupt(\"return\", _context.t0.response.data.messeage);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n};\nexport var addTodos = function addTodos(todo) {\n  var response;\n  return _regeneratorRuntime.async(function addTodos$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(authInstance.post(\"/api/todos/addTodo\", todo));\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 9;\n          break;\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n          return _context2.abrupt(\"return\", _context2.t0.response.data.messeage);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n};\nexport var checkTodos = function checkTodos(_ref2) {\n  var id, checked;\n  return _regeneratorRuntime.async(function checkTodos$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          id = _ref2.id, checked = _ref2.checked;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(authInstance.post(\"/api/todos/checkTodo\", {\n            id: id,\n            checked: checked\n          }));\n\n        case 4:\n          _context3.next = 9;\n          break;\n\n        case 6:\n          _context3.prev = 6;\n          _context3.t0 = _context3[\"catch\"](1);\n          return _context3.abrupt(\"return\", _context3.t0.response.data.messeage);\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[1, 6]], Promise);\n};\nexport var deleteTodos = function deleteTodos(_ref3) {\n  var id;\n  return _regeneratorRuntime.async(function deleteTodos$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          id = _ref3.id;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(authInstance.delete(\"/api/todos/deleteTodo/\" + id));\n\n        case 4:\n          _context4.next = 9;\n          break;\n\n        case 6:\n          _context4.prev = 6;\n          _context4.t0 = _context4[\"catch\"](1);\n          return _context4.abrupt(\"return\", _context4.t0.response.data.messeage);\n\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[1, 6]], Promise);\n};","map":{"version":3,"sources":["C:/Users/Сергій/Desktop/Проекти/React Native/Todo-app/client/http/todoAPI.ts"],"names":["authInstance","getTodosDB","id","get","data","response","messeage","addTodos","todo","post","checkTodos","checked","deleteTodos","delete"],"mappings":";AAAA,SAASA,YAAT;AAaA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,EAAT,QAASA,EAAT;AAAA;AAAA;AAAA,2CAECF,YAAY,CAACG,GAAb,0BACED,EADF,CAFD;;AAAA;AAAA;AAEdE,UAAAA,IAFc,yBAEdA,IAFc;AAAA,2CAKfA,IALe;;AAAA;AAAA;AAAA;AAAA,2CAOf,YAAEC,QAAF,CAAWD,IAAX,CAAgBE,QAPD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAWP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEGR,YAAY,CAACS,IAAb,uBAA+CD,IAA/C,CAFH;;AAAA;AAEdH,UAAAA,QAFc;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAIb,aAAEA,QAAF,CAAWD,IAAX,CAAgBE,QAJH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;AAQP,OAAO,IAAMI,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBR,UAAAA,EADwB,SACxBA,EADwB,EAExBS,OAFwB,SAExBA,OAFwB;AAAA;AAAA;AAAA,2CAKhBX,YAAY,CAACS,IAAb,yBAA0C;AAC9CP,YAAAA,EAAE,EAAFA,EAD8C;AAE9CS,YAAAA,OAAO,EAAPA;AAF8C,WAA1C,CALgB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAUf,aAAEN,QAAF,CAAWD,IAAX,CAAgBE,QAVD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAcP,OAAO,IAAMM,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAASV,UAAAA,EAAT,SAASA,EAAT;AAAA;AAAA;AAAA,2CAEjBF,YAAY,CAACa,MAAb,4BAAoDX,EAApD,CAFiB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAIhB,aAAEG,QAAF,CAAWD,IAAX,CAAgBE,QAJA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB","sourcesContent":["import { authInstance } from \"./index\";\r\nimport { AppDispatch } from \"../store/store\";\r\nimport {\r\n  fetchTodoError,\r\n  fetchTodos,\r\n  fetchTodosSuccess,\r\n  addTodo,\r\n  deleteTodo,\r\n  checkTodo,\r\n} from \"../store/todoSlice\";\r\nimport { ITodo } from \"../interfaces/ITodo\";\r\nimport { IUser } from \"../interfaces/IUser\";\r\n\r\nexport const getTodosDB = async ({ id }: Pick<IUser, \"id\">) => {\r\n  try {\r\n    const { data } = await authInstance.get<ITodo[]>(\r\n      `/api/todos/getTodos/${id}`\r\n    );\r\n    return data;\r\n  } catch (e: any) {\r\n    return e.response.data.messeage;\r\n  }\r\n};\r\n\r\nexport const addTodos = async (todo: ITodo) => {\r\n  try {\r\n    const response = await authInstance.post<ITodo>(`/api/todos/addTodo`, todo);\r\n  } catch (e: any) {\r\n    return e.response.data.messeage;\r\n  }\r\n};\r\n\r\nexport const checkTodos = async ({\r\n  id,\r\n  checked,\r\n}: Pick<ITodo, \"id\" | \"checked\">) => {\r\n  try {\r\n    await authInstance.post(`/api/todos/checkTodo`, {\r\n      id,\r\n      checked,\r\n    });\r\n  } catch (e: any) {\r\n    return e.response.data.messeage;\r\n  }\r\n};\r\n\r\nexport const deleteTodos = async ({ id }: Pick<ITodo, \"id\">) => {\r\n  try {\r\n    await authInstance.delete<ITodo>(`/api/todos/deleteTodo/${id}`);\r\n  } catch (e: any) {\r\n    return e.response.data.messeage;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}